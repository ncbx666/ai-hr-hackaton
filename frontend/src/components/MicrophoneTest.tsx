import React, { useState, useRef } from 'react';

const MicrophoneTest: React.FC = () => {
  const [isRecording, setIsRecording] = useState(false);
  const [status, setStatus] = useState('–ì–æ—Ç–æ–≤ –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é');
  const [audioUrl, setAudioUrl] = useState<string | null>(null);
  
  const mediaRecorderRef = useRef<MediaRecorder | null>(null);
  const audioChunksRef = useRef<Blob[]>([]);

  const startRecording = async () => {
    try {
      setStatus('–ó–∞–ø—Ä–∞—à–∏–≤–∞—é –¥–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É...');
      
      const stream = await navigator.mediaDevices.getUserMedia({ 
        audio: {
          echoCancellation: true,
          noiseSuppression: true,
          autoGainControl: true
        } 
      });
      
      setStatus('‚úÖ –î–æ—Å—Ç—É–ø –ø–æ–ª—É—á–µ–Ω! –ù–∞—á–∏–Ω–∞—é –∑–∞–ø–∏—Å—å...');
      
      const mediaRecorder = new MediaRecorder(stream);
      audioChunksRef.current = [];
      
      mediaRecorder.ondataavailable = (event) => {
        if (event.data.size > 0) {
          audioChunksRef.current.push(event.data);
        }
      };

      mediaRecorder.onstop = () => {
        const audioBlob = new Blob(audioChunksRef.current, { type: 'audio/wav' });
        const url = URL.createObjectURL(audioBlob);
        setAudioUrl(url);
        setStatus('‚úÖ –ó–∞–ø–∏—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ú–æ–∂–µ—Ç–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏.');
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ —Ç—Ä–µ–∫–∏
        stream.getTracks().forEach(track => track.stop());
      };

      mediaRecorderRef.current = mediaRecorder;
      mediaRecorder.start();
      setIsRecording(true);
      
    } catch (error: any) {
      let errorMessage = '–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É: ';
      
      if (error.name === 'NotAllowedError') {
        errorMessage += '–†–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É –≤ –±—Ä–∞—É–∑–µ—Ä–µ';
      } else if (error.name === 'NotFoundError') {
        errorMessage += '–ú–∏–∫—Ä–æ—Ñ–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω';
      } else {
        errorMessage += error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
      }
      
      setStatus(`‚ùå ${errorMessage}`);
    }
  };

  const stopRecording = () => {
    if (mediaRecorderRef.current && mediaRecorderRef.current.state === 'recording') {
      mediaRecorderRef.current.stop();
      setIsRecording(false);
      setStatus('–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –∑–∞–ø–∏—Å—å...');
    }
  };

  const playRecording = () => {
    if (audioUrl) {
      const audio = new Audio(audioUrl);
      audio.play();
      setStatus('üîä –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ...');
      audio.onended = () => setStatus('‚úÖ –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
    }
  };

  return (
    <div style={{ 
      padding: '20px', 
      fontFamily: 'Arial, sans-serif',
      backgroundColor: '#f8f9fa',
      minHeight: '100vh'
    }}>
      <div style={{
        display: 'flex',
        justifyContent: 'space-between',
        alignItems: 'center',
        marginBottom: '30px',
        background: 'white',
        padding: '20px',
        borderRadius: '12px',
        boxShadow: '0 4px 16px rgba(0,0,0,0.1)'
      }}>
        <h1 style={{ 
          color: '#2c3e50', 
          margin: 0,
          fontSize: '28px',
          fontWeight: 600 
        }}>üé§ –¢–µ—Å—Ç –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞</h1>
        <div style={{ display: 'flex', gap: '12px' }}>
          <button 
            onClick={() => window.location.href = '/hr/dashboard'}
            style={{
              backgroundColor: '#ecf0f1',
              color: '#34495e',
              padding: '10px 20px',
              border: 'none',
              borderRadius: '8px',
              cursor: 'pointer',
              fontSize: '14px',
              fontWeight: 500,
              transition: 'all 0.3s ease'
            }}
          >
            –ì–ª–∞–≤–Ω–∞—è
          </button>
          <button 
            onClick={() => window.location.href = '/hr/create'}
            style={{
              backgroundColor: '#ecf0f1',
              color: '#34495e',
              padding: '10px 20px',
              border: 'none',
              borderRadius: '8px',
              cursor: 'pointer',
              fontSize: '14px',
              fontWeight: 500,
              transition: 'all 0.3s ease'
            }}
          >
            –°–æ–∑–¥–∞—Ç—å —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ
          </button>
          <button 
            onClick={() => window.location.href = '/hr/results'}
            style={{
              backgroundColor: '#ecf0f1',
              color: '#34495e',
              padding: '10px 20px',
              border: 'none',
              borderRadius: '8px',
              cursor: 'pointer',
              fontSize: '14px',
              fontWeight: 500,
              transition: 'all 0.3s ease'
            }}
          >
            –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
          </button>
          <button 
            onClick={() => window.location.href = '/test/microphone'}
            style={{
              backgroundColor: '#3498db',
              color: 'white',
              padding: '10px 20px',
              border: 'none',
              borderRadius: '8px',
              cursor: 'pointer',
              fontSize: '14px',
              fontWeight: 500,
              transition: 'all 0.3s ease'
            }}
          >
            –¢–µ—Å—Ç –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
          </button>
        </div>
      </div>
      
      <div style={{
        background: 'white',
        padding: '30px',
        borderRadius: '12px',
        boxShadow: '0 4px 16px rgba(0,0,0,0.1)'
      }}>
        <h2>üé§ –¢–µ—Å—Ç –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞</h2>
      
      <div style={{ 
        margin: '20px 0', 
        padding: '15px', 
        background: '#f0f0f0', 
        borderRadius: '5px' 
      }}>
        <strong>–°—Ç–∞—Ç—É—Å:</strong> {status}
      </div>

      <div style={{ margin: '20px 0' }}>
        {!isRecording ? (
          <button 
            onClick={startRecording}
            style={{
              padding: '10px 20px',
              fontSize: '16px',
              background: '#4CAF50',
              color: 'white',
              border: 'none',
              borderRadius: '5px',
              cursor: 'pointer',
              marginRight: '10px'
            }}
          >
            üé§ –ù–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å
          </button>
        ) : (
          <button 
            onClick={stopRecording}
            style={{
              padding: '10px 20px',
              fontSize: '16px',
              background: '#f44336',
              color: 'white',
              border: 'none',
              borderRadius: '5px',
              cursor: 'pointer',
              marginRight: '10px'
            }}
          >
            ‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å
          </button>
        )}

        {audioUrl && (
          <button 
            onClick={playRecording}
            style={{
              padding: '10px 20px',
              fontSize: '16px',
              background: '#2196F3',
              color: 'white',
              border: 'none',
              borderRadius: '5px',
              cursor: 'pointer'
            }}
          >
            üîä –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏
          </button>
        )}
      </div>

      <div style={{ marginTop: '20px', fontSize: '14px', color: '#666' }}>
        <h3>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:</h3>
        <ol>
          <li>–ù–∞–∂–º–∏—Ç–µ "–ù–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å"</li>
          <li>–†–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É –≤ –±—Ä–∞—É–∑–µ—Ä–µ</li>
          <li>–ì–æ–≤–æ—Ä–∏—Ç–µ –≤ –º–∏–∫—Ä–æ—Ñ–æ–Ω</li>
          <li>–ù–∞–∂–º–∏—Ç–µ "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å"</li>
          <li>–ù–∞–∂–º–∏—Ç–µ "–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏" —á—Ç–æ–±—ã —É—Å–ª—ã—à–∞—Ç—å –∑–∞–ø–∏—Å—å</li>
        </ol>
      </div>
      
      </div>
    </div>
  );
};

export default MicrophoneTest;
