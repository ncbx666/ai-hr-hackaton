import React, { useState } from 'react';
import './CreateInterview.css';

const CreateInterview: React.FC = () => {
  const [jobDescription, setJobDescription] = useState<File | null>(null);
  const [resume, setResume] = useState<File | null>(null);
  const [candidateName, setCandidateName] = useState('');
  const [position, setPosition] = useState('');
  const [loading, setLoading] = useState(false);
  const [generatedLink, setGeneratedLink] = useState('');

  const handleJobDescriptionUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file) {
      setJobDescription(file);
    }
  };

  const handleResumeUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file) {
      setResume(file);
    }
  };

  const handleSubmit = async (event: React.FormEvent) => {
    event.preventDefault();
    
    if (!jobDescription || !resume || !candidateName || !position) {
      alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è');
      return;
    }

    setLoading(true);

    try {
      // –ò–º–∏—Ç–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
      const sessionId = Math.random().toString(36).substring(2, 15);
      const link = `${window.location.origin}/candidate/${sessionId}/welcome`;
      setGeneratedLink(link);
      
    } catch (error) {
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è');
    } finally {
      setLoading(false);
    }
  };

  const copyToClipboard = () => {
    navigator.clipboard.writeText(generatedLink);
    alert('–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!');
  };

  const resetForm = () => {
    setJobDescription(null);
    setResume(null);
    setCandidateName('');
    setPosition('');
    setGeneratedLink('');
  };

  if (generatedLink) {
    return (
      <div className="create-interview">
        <div className="success-container">
          <h1>–°—Å—ã–ª–∫–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞!</h1>
          <div className="link-container">
            <p>–ù–∞ —ç—Ç–æ–º —ç–∫—Ä–∞–Ω–µ –ø–æ—è–≤–ª—è–µ—Ç—Å—è —É–Ω–∏–∫–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞. HR –µ—ë –∫–æ–ø–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç.</p>
            <div className="generated-link">
              <input 
                type="text" 
                value={generatedLink} 
                readOnly 
                className="link-input"
              />
              <button onClick={copyToClipboard} className="copy-btn">
                –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
              </button>
            </div>
            <p className="backend-info">
              üîß Backend –≤ —ç—Ç–æ—Ç –º–æ–º–µ–Ω—Ç: –ø–∞—Ä—Å–∏—Ç —Ñ–∞–π–ª—ã (ML-1), —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—Å—ë –≤ –ë–î, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Å—ã–ª–∫—É.
            </p>
          </div>
          <div className="actions">
            <button onClick={resetForm} className="new-interview-btn">
              –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ
            </button>
            <button 
              onClick={() => window.location.href = '/hr/dashboard'} 
              className="dashboard-btn"
            >
              –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø–∞–Ω–µ–ª–∏
            </button>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="create-interview">
      <div className="header">
        <h1>–°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è</h1>
        <button 
          onClick={() => window.location.href = '/hr/dashboard'}
          className="back-btn"
        >
          ‚Üê –ù–∞–∑–∞–¥ –∫ –ø–∞–Ω–µ–ª–∏
        </button>
      </div>

      <form onSubmit={handleSubmit} className="interview-form">
        <div className="form-section">
          <h2>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–∑–∏—Ü–∏–∏</h2>
          
          <div className="form-group">
            <label htmlFor="position">–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏:</label>
            <input
              type="text"
              id="position"
              value={position}
              onChange={(e) => setPosition(e.target.value)}
              placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: Frontend Developer"
              required
            />
          </div>

          <div className="form-group">
            <label htmlFor="candidateName">–ò–º—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞:</label>
            <input
              type="text"
              id="candidateName"
              value={candidateName}
              onChange={(e) => setCandidateName(e.target.value)}
              placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á"
              required
            />
          </div>
        </div>

        <div className="form-section">
          <h2>–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤</h2>
          
          <div className="form-group">
            <label htmlFor="jobDescription">–û–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏:</label>
            <div className="file-upload">
              <input
                type="file"
                id="jobDescription"
                onChange={handleJobDescriptionUpload}
                accept=".pdf,.doc,.docx,.txt"
                required
              />
              {jobDescription && (
                <div className="file-info">
                  ‚úì –ó–∞–≥—Ä—É–∂–µ–Ω: {jobDescription.name}
                </div>
              )}
            </div>
          </div>

          <div className="form-group">
            <label htmlFor="resume">–†–µ–∑—é–º–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</label>
            <div className="file-upload">
              <input
                type="file"
                id="resume"
                onChange={handleResumeUpload}
                accept=".pdf,.doc,.docx,.txt"
                required
              />
              {resume && (
                <div className="file-info">
                  ‚úì –ó–∞–≥—Ä—É–∂–µ–Ω–æ: {resume.name}
                </div>
              )}
            </div>
          </div>
        </div>

        <div className="form-actions">
          <button 
            type="submit" 
            className="create-btn"
            disabled={loading}
          >
            {loading ? '–°–æ–∑–¥–∞—ë—Ç—Å—è...' : '–°–æ–∑–¥–∞—Ç—å'}
          </button>
        </div>
      </form>

      {loading && (
        <div className="loading-overlay">
          <div className="loading-spinner">
            <p>–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã –∏ —Å–æ–∑–¥–∞—ë–º —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ...</p>
          </div>
        </div>
      )}
    </div>
  );
};

export default CreateInterview;
