import React, { useState } from 'react';
import './CreateInterview.css';

const CreateInterview: React.FC = () => {
  const [jobDescriptions, setJobDescriptions] = useState<File[]>([]);
  const [resumes, setResumes] = useState<File[]>([]);
  const [position, setPosition] = useState('');
  const [loading, setLoading] = useState(false);
  const [generatedLink, setGeneratedLink] = useState('');

  const handleJobDescriptionUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
    const files = event.target.files;
    if (files) {
      setJobDescriptions(Array.from(files));
    }
  };

  const handleResumeUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
    const files = event.target.files;
    if (files) {
      setResumes(Array.from(files));
    }
  } 

  const uploadFiles = async (files: File[]) => {
    const formData = new FormData();
    files.forEach(file => formData.append('files', file));
  const response = await fetch('http://localhost:8000/api/hr/upload-multi', {
      method: 'POST',
      body: formData
    });
    if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤');
    const data = await response.json();
    return data.files;
  };

  const handleSubmit = async (event: React.FormEvent) => {
    event.preventDefault();
    if (jobDescriptions.length === 0 || resumes.length === 0 || !position) {
      alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è');
      return;
    }
    setLoading(true);
    try {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∞–∫–∞–Ω—Å–∏–∏
      const jobDescLinks = await uploadFiles(jobDescriptions);
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∑—é–º–µ
      const resumeLinks = await uploadFiles(resumes);
      // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è API —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è
      const interviewData = {
        position,
        job_description: jobDescLinks.map((f: { url: string }) => f.url).join(', '),
        resumes: resumeLinks.map((f: { filename: string; url: string }) => ({ filename: f.filename, url: f.url }))
      };
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è
  const resp = await fetch('http://localhost:8000/api/hr/interviews', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(interviewData)
      });
      if (!resp.ok) throw new Error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è');
      const result = await resp.json();
      // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
      const link = `${window.location.origin}/candidate/${result.id}/welcome`;
      setGeneratedLink(link);
    } catch (error) {
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è');
    } finally {
      setLoading(false);
    }
  };

  const copyToClipboard = async () => {
    try {
      // –ü–æ–ø—Ä–æ–±—É–µ–º —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π Clipboard API
      await navigator.clipboard.writeText(generatedLink);
      alert('–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!');
    } catch (error) {
      // Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ —á–µ—Ä–µ–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ
      const textArea = document.createElement('textarea');
      textArea.value = generatedLink;
      textArea.style.position = 'fixed';
      textArea.style.left = '-999999px';
      textArea.style.top = '-999999px';
      document.body.appendChild(textArea);
      textArea.focus();
      textArea.select();
      
      try {
        document.execCommand('copy');
        alert('–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!');
      } catch (execError) {
        console.error('–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è:', execError);
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
        prompt('–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É –≤—Ä—É—á–Ω—É—é:', generatedLink);
      } finally {
        document.body.removeChild(textArea);
      }
    }
  };

  const resetForm = () => {
    setJobDescriptions([]);
    setResumes([]);
    setPosition('');
    setGeneratedLink('');
  };

  if (generatedLink) {
    return (
      <div className="create-interview">
        <div className="success-container">
          <h1>–°—Å—ã–ª–∫–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞!</h1>
          <div className="link-container">
            <p>–ù–∞ —ç—Ç–æ–º —ç–∫—Ä–∞–Ω–µ –ø–æ—è–≤–ª—è–µ—Ç—Å—è —É–Ω–∏–∫–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞. HR –µ—ë –∫–æ–ø–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç.</p>
            <div className="generated-link">
              <input 
                type="text" 
                value={generatedLink} 
                readOnly 
                className="link-input"
              />
              <button onClick={copyToClipboard} className="copy-btn">
                –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
              </button>
            </div>
            <p className="backend-info">
              üîß Backend –≤ —ç—Ç–æ—Ç –º–æ–º–µ–Ω—Ç: –ø–∞—Ä—Å–∏—Ç —Ñ–∞–π–ª—ã (ML-1), —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—Å—ë –≤ –ë–î, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Å—ã–ª–∫—É.
            </p>
          </div>
          <div className="actions">
            <button onClick={resetForm} className="new-interview-btn">
              –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ
            </button>
            <button 
              onClick={() => window.location.href = '/hr/dashboard'} 
              className="dashboard-btn"
            >
              –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø–∞–Ω–µ–ª–∏
            </button>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="create-interview">
      <div className="header">
        <h1>–°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è</h1>
        <button 
          onClick={() => window.location.href = '/hr/dashboard'}
          className="back-btn"
        >
          ‚Üê –ù–∞–∑–∞–¥ –∫ –ø–∞–Ω–µ–ª–∏
        </button>
      </div>

      <form onSubmit={handleSubmit} className="interview-form">
        <div className="form-section">
          <h2>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–∑–∏—Ü–∏–∏</h2>
          <div className="form-group">
            <label htmlFor="position">–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏:</label>
            <input
              type="text"
              id="position"
              value={position}
              onChange={(e) => setPosition(e.target.value)}
              placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: Frontend Developer"
              required
            />
          </div>
        </div>

        <div className="form-section">
          <h2>–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤</h2>
          <div className="form-group">
            <label htmlFor="jobDescriptions">–û–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ):</label>
            <div className="file-upload">
              <input
                type="file"
                id="jobDescriptions"
                onChange={handleJobDescriptionUpload}
                accept=".pdf,.doc,.docx,.txt"
                multiple
                required
              />
              {jobDescriptions.length > 0 && (
                <div className="file-info">
                  <ul>
                    {jobDescriptions.map((file, idx) => (
                      <li key={idx}>‚úì {file.name}</li>
                    ))}
                  </ul>
                </div>
              )}
            </div>
          </div>
          <div className="form-group">
            <label htmlFor="resumes">–†–µ–∑—é–º–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ):</label>
            <div className="file-upload">
              <input
                type="file"
                id="resumes"
                onChange={handleResumeUpload}
                accept=".pdf,.doc,.docx,.txt"
                multiple
                required
              />
              {resumes.length > 0 && (
                <div className="file-info">
                  <ul>
                    {resumes.map((file, idx) => (
                      <li key={idx}>‚úì {file.name}</li>
                    ))}
                  </ul>
                </div>
              )}
            </div>
          </div>
        </div>

        <div className="form-actions">
          <button 
            type="submit" 
            className="create-btn"
            disabled={loading}
          >
            {loading ? '–°–æ–∑–¥–∞—ë—Ç—Å—è...' : '–°–æ–∑–¥–∞—Ç—å'}
          </button>
        </div>
      </form>

      {loading && (
        <div className="loading-overlay">
          <div className="loading-spinner">
            <div className="custom-spinner"></div>
          </div>
        </div>
      )}
    </div>
  );
};

export default CreateInterview;
