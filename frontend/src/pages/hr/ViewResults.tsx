import React, { useState, useEffect } from 'react';
import './ViewResults.css';

interface ScoreDetails {
  skill: string;
  score: string;
  comment: string;
}

interface ScoreBreakdown {
  hard_skills: {
    score_percent: number;
    details: ScoreDetails[];
  };
  experience: {
    score_percent: number;
    comment: string;
    scores: {
      duration: number;
      relevance: number;
      functionality: number;
    };
    penalty: number;
  };
  soft_skills: {
    score_percent: number;
    comment: string;
    scores: {
      star_method: number;
      motivation: number;
    };
  };
}

interface CandidateResult {
  candidate_name: string;
  final_score_percent: number;
  verdict: string;
  breakdown: ScoreBreakdown;
}

const ViewResults: React.FC = () => {
  const [results, setResults] = useState<CandidateResult | null>(null);
  const [loading, setLoading] = useState(true);
  const [editMode, setEditMode] = useState(false);

  useEffect(() => {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–∏–º–µ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ñ–∞–π–ª–∞
    const mockResult: CandidateResult = {
      candidate_name: "–°–µ—Ä–≥–µ–µ–≤ –ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤–∏—á",
      final_score_percent: 82.33,
      verdict: "–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É",
      breakdown: {
        hard_skills: {
          score_percent: 85.0,
          details: [
            {
              skill: "–ê–Ω—Ç–∏—Ñ—Ä–æ–¥",
              score: "5/5",
              comment: "–ì–ª—É–±–æ–∫–∞—è —ç–∫—Å–ø–µ—Ä—Ç–∏–∑–∞: –ø—Ä–∏–≤–µ–¥–µ–Ω—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã, –º–µ—Ç—Ä–∏–∫–∏ –∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Ä–µ—à–µ–Ω–∏—è."
            },
            {
              skill: "–°–£–ë–î",
              score: "4/5",
              comment: "–ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∫–µ–π—Å: —É–ø–æ–º—è–Ω—É—Ç—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏ –∏–∑–º–µ—Ä–∏–º—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã."
            },
            {
              skill: "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –¢–ó",
              score: "2/5",
              comment: "–û–±—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: –µ—Å—Ç—å –ø–æ–Ω–∏–º–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞, –Ω–æ –±–µ–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤."
            },
            {
              skill: "–î–ë–û –Æ–õ",
              score: "0/5",
              comment: "–£—Ö–æ–¥ –æ—Ç –æ—Ç–≤–µ—Ç–∞ –∏–ª–∏ –æ—Ç–≤–µ—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π."
            }
          ]
        },
        experience: {
          score_percent: 81.67,
          comment: "–û—Ü–µ–Ω–∫–∞ –æ–ø—ã—Ç–∞ —á–∞—Å—Ç–∏—á–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∑–∞–≥–ª—É—à–∫–∏.",
          scores: {
            duration: 100.0,
            relevance: 70.0,
            functionality: 75.0
          },
          penalty: 1.0
        },
        soft_skills: {
          score_percent: 90.0,
          comment: "–û—Ü–µ–Ω–∫–∞ Soft Skills –æ—Å–Ω–æ–≤–∞–Ω–∞ –Ω–∞ –∞–Ω–∞–ª–∏–∑–µ –æ—Ç–≤–µ—Ç–æ–≤.",
          scores: {
            star_method: 100.0,
            motivation: 80.0
          }
        }
      }
    };

    setTimeout(() => {
      setResults(mockResult);
      setLoading(false);
    }, 1000);
  }, []);

  const getVerdictClass = (verdict: string) => {
    if (verdict.includes('–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω')) return 'verdict-recommended';
    if (verdict.includes('–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ')) return 'verdict-review';
    return 'verdict-rejected';
  };

  const exportToExcel = () => {
    alert('–≠–∫—Å–ø–æ—Ä—Ç –≤ Excel (—Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ backend)');
  };

  if (loading) {
    return (
      <div className="view-results">
        <div className="loading">–ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...</div>
      </div>
    );
  }

  if (!results) {
    return (
      <div className="view-results">
        <div className="error">–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</div>
      </div>
    );
  }

  return (
    <div className="view-results">
      <div className="header">
        <h1>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è</h1>
        <div className="header-actions">
          <button 
            onClick={() => setEditMode(!editMode)}
            className="edit-btn"
          >
            {editMode ? '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å' : '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å'}
          </button>
          <button onClick={exportToExcel} className="export-btn">
            –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel
          </button>
          <button 
            onClick={() => window.location.href = '/hr/dashboard'}
            className="back-btn"
          >
            ‚Üê –ù–∞–∑–∞–¥
          </button>
        </div>
      </div>

      <div className="results-container">
        <div className="summary-card">
          <h2>–û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç</h2>
          <div className="candidate-info">
            <h3>{results.candidate_name}</h3>
            <div className="final-score">
              <span className="score-value">{results.final_score_percent}%</span>
              <span className={`verdict ${getVerdictClass(results.verdict)}`}>
                {results.verdict}
              </span>
            </div>
          </div>
        </div>

        <div className="breakdown-section">
          <h2>–î–µ—Ç–∞–ª—å–Ω–∞—è —Ä–∞–∑–±–∏–≤–∫–∞ –æ—Ü–µ–Ω–æ–∫</h2>
          
          {/* Hard Skills */}
          <div className="score-category">
            <h3>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–∞–≤—ã–∫–∏ ({results.breakdown.hard_skills.score_percent}%)</h3>
            <div className="skills-details">
              {results.breakdown.hard_skills.details.map((skill, index) => (
                <div key={index} className="skill-item">
                  <div className="skill-header">
                    <span className="skill-name">{skill.skill}</span>
                    <span className="skill-score">{skill.score}</span>
                  </div>
                  <div className="skill-comment">{skill.comment}</div>
                </div>
              ))}
            </div>
          </div>

          {/* Experience */}
          <div className="score-category">
            <h3>–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã ({results.breakdown.experience.score_percent}%)</h3>
            <div className="experience-details">
              <p className="category-comment">{results.breakdown.experience.comment}</p>
              <div className="experience-scores">
                <div className="score-item">
                  <span>–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</span>
                  <span>{results.breakdown.experience.scores.duration}%</span>
                </div>
                <div className="score-item">
                  <span>–†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å:</span>
                  <span>{results.breakdown.experience.scores.relevance}%</span>
                </div>
                <div className="score-item">
                  <span>–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:</span>
                  <span>{results.breakdown.experience.scores.functionality}%</span>
                </div>
              </div>
            </div>
          </div>

          {/* Soft Skills */}
          <div className="score-category">
            <h3>–ü–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏–µ –Ω–∞–≤—ã–∫–∏ ({results.breakdown.soft_skills.score_percent}%)</h3>
            <div className="soft-skills-details">
              <p className="category-comment">{results.breakdown.soft_skills.comment}</p>
              <div className="soft-skills-scores">
                <div className="score-item">
                  <span>STAR –º–µ—Ç–æ–¥:</span>
                  <span>{results.breakdown.soft_skills.scores.star_method}%</span>
                </div>
                <div className="score-item">
                  <span>–ú–æ—Ç–∏–≤–∞—Ü–∏—è:</span>
                  <span>{results.breakdown.soft_skills.scores.motivation}%</span>
                </div>
              </div>
            </div>
          </div>
        </div>

        <div className="backend-info">
          <p>üîß Backend –≤ —ç—Ç–æ—Ç –º–æ–º–µ–Ω—Ç: –∑–∞–ø—É—Å–∫–∞–µ—Ç —Å–∫–æ—Ä–∏–Ω–≥ (ML-3), —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç—á—ë—Ç –≤ –ë–î, –æ–±–Ω–æ–≤–ª—è–µ—Ç Google –¢–∞–±–ª–∏—Ü—É.</p>
        </div>
      </div>
    </div>
  );
};

export default ViewResults;
