import React, { useState } from 'react';
import { useParams } from 'react-router-dom';
import './Interview.css';

const InterviewSimple: React.FC = () => {
  const { sessionId } = useParams<{ sessionId: string }>();
  const [isRecording, setIsRecording] = useState(false);
  const [messages, setMessages] = useState<string[]>([]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
  const setupMicrophone = async () => {
    try {
      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
      alert('‚úÖ –î–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É –ø–æ–ª—É—á–µ–Ω!');
      stream.getTracks().forEach(track => track.stop());
    } catch (error: any) {
      alert('‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É: ' + error.message);
    }
  };

  // –ù–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å
  const startRecording = async () => {
    try {
      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
      setIsRecording(true);
      setMessages(prev => [...prev, 'üé§ –ó–∞–ø–∏—Å—å –Ω–∞—á–∞–ª–∞—Å—å...']);
      
      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥ –¥–ª—è –¥–µ–º–æ
      setTimeout(() => {
        stream.getTracks().forEach(track => track.stop());
        setIsRecording(false);
        setMessages(prev => [...prev, '‚èπÔ∏è –ó–∞–ø–∏—Å—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞']);
      }, 5000);
      
    } catch (error: any) {
      alert('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏: ' + error.message);
    }
  };

  const stopRecording = () => {
    setIsRecording(false);
    setMessages(prev => [...prev, '‚èπÔ∏è –ó–∞–ø–∏—Å—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤—Ä—É—á–Ω—É—é']);
  };

  return (
    <div className="interview-container">
      <div className="interview-header">
        <h1>–ò–Ω—Ç–µ—Ä–≤—å—é - –°–µ—Å—Å–∏—è {sessionId}</h1>
        <div className="connection-status">
          –°—Ç–∞—Ç—É—Å: üü¢ –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ
        </div>
      </div>

      <div className="interview-content">
        <div className="messages-section">
          <h3>–°–æ–æ–±—â–µ–Ω–∏—è:</h3>
          <div className="messages-list">
            {messages.map((msg, index) => (
              <div key={index} className="message">
                {msg}
              </div>
            ))}
            {messages.length === 0 && (
              <p>–ü–æ–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ—Ç. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –º–∏–∫—Ä–æ—Ñ–æ–Ω –∏ –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–ø–∏—Å—å.</p>
            )}
          </div>
        </div>

        <div className="controls-section">
          <div className="microphone-setup">
            <button 
              onClick={setupMicrophone}
              className="setup-button"
              title="–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É"
            >
              üîê –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –º–∏–∫—Ä–æ—Ñ–æ–Ω
            </button>
          </div>
          
          <div className="recording-controls">
            {!isRecording ? (
              <button 
                onClick={startRecording}
                className="record-button"
              >
                üé§ –ù–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å
              </button>
            ) : (
              <button 
                onClick={stopRecording}
                className="stop-button"
              >
                ‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å
              </button>
            )}
          </div>

          <div className="interview-controls">
            <button 
              onClick={() => setMessages(prev => [...prev, '‚ùå –ò–Ω—Ç–µ—Ä–≤—å—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ'])}
              className="end-button"
            >
              ‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤—å—é
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

export default InterviewSimple;
