import React, { useState, useEffect, useRef } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import './Interview.css';

interface Message {
  id: string;
  type: 'ai' | 'user';
  content: string;
  timestamp: Date;
  isVoice?: boolean;
}

const Interview: React.FC = () => {
  const { sessionId } = useParams<{ sessionId: string }>();
  const navigate = useNavigate();
  const [messages, setMessages] = useState<Message[]>([]);
  const [currentMessage, setCurrentMessage] = useState('');
  const [isRecording, setIsRecording] = useState(false);
  const [isProcessing, setIsProcessing] = useState(false);
  const [inputMode, setInputMode] = useState<'text' | 'voice'>('text');
  const [interviewStep, setInterviewStep] = useState(0);
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const totalSteps = 5; // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤

  useEffect(() => {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è
    startInterview();
  }, []);

  useEffect(() => {
    // –ê–≤—Ç–æ—Å–∫—Ä–æ–ª–ª –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [messages]);

  const startInterview = async () => {
    // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç AI
    const welcomeMessage: Message = {
      id: Date.now().toString(),
      type: 'ai',
      content: '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ú–µ–Ω—è –∑–æ–≤—É—Ç AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –∏ —è –ø—Ä–æ–≤–µ–¥—É —Å –≤–∞–º–∏ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ. –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —Å –Ω–µ–±–æ–ª—å—à–æ–≥–æ —Ä–∞—Å—Å–∫–∞–∑–∞ –æ —Å–µ–±–µ. –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–≤–æ–µ–º –æ–ø—ã—Ç–µ —Ä–∞–±–æ—Ç—ã –∏ –∫–ª—é—á–µ–≤—ã—Ö –Ω–∞–≤—ã–∫–∞—Ö.',
      timestamp: new Date()
    };
    
    setMessages([welcomeMessage]);
    setInterviewStep(1);
  };

  const sendMessage = async (content: string, isVoice: boolean = false) => {
    if (!content.trim()) return;

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userMessage: Message = {
      id: Date.now().toString(),
      type: 'user',
      content: content.trim(),
      timestamp: new Date(),
      isVoice
    };

    setMessages(prev => [...prev, userMessage]);
    setCurrentMessage('');
    setIsProcessing(true);

    try {
      // –ò–º–∏—Ç–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
      await new Promise(resolve => setTimeout(resolve, 2000));

      const nextQuestion = getNextQuestion(interviewStep);
      
      if (nextQuestion) {
        const aiMessage: Message = {
          id: (Date.now() + 1).toString(),
          type: 'ai',
          content: nextQuestion,
          timestamp: new Date()
        };
        
        setMessages(prev => [...prev, aiMessage]);
        setInterviewStep(prev => prev + 1);
      } else {
        // –°–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ
        const completionMessage: Message = {
          id: (Date.now() + 1).toString(),
          type: 'ai',
          content: '–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–∏ –æ—Ç–≤–µ—Ç—ã! –°–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ú—ã –æ–±—Ä–∞–±–æ—Ç–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.',
          timestamp: new Date()
        };
        
        setMessages(prev => [...prev, completionMessage]);
        
        // –ü–µ—Ä–µ—Ö–æ–¥ –∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—é —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => {
          navigate(`/candidate/${sessionId}/completion`);
        }, 3000);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    } finally {
      setIsProcessing(false);
    }
  };

  const getNextQuestion = (step: number): string | null => {
    const questions = [
      '', // step 0 - —É–∂–µ –∑–∞–¥–∞–Ω –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å
      '–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–∞–º–æ–º —Å–ª–æ–∂–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ, –Ω–∞–¥ –∫–æ—Ç–æ—Ä—ã–º –≤—ã —Ä–∞–±–æ—Ç–∞–ª–∏. –ö–∞–∫–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –∏ –∫–∞–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Ä–µ—à–∞–ª–∏?',
      '–û–ø–∏—à–∏—Ç–µ —Å–∏—Ç—É–∞—Ü–∏—é, –∫–æ–≥–¥–∞ –≤–∞–º –ø—Ä–∏—à–ª–æ—Å—å —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –∫–æ–º–∞–Ω–¥–µ –Ω–∞–¥ —Å—Ä–æ—á–Ω–æ–π –∑–∞–¥–∞—á–µ–π. –ö–∞–∫ –≤—ã –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–ª–∏ —Ä–∞–±–æ—Ç—É?',
      '–ö–∞–∫ –≤—ã –æ–±—ã—á–Ω–æ –∏–∑—É—á–∞–µ—Ç–µ –Ω–æ–≤—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏? –ü—Ä–∏–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–º–µ—Ä –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏, –∫–æ—Ç–æ—Ä—É—é –æ—Å–≤–æ–∏–ª–∏.',
      '–ü–æ—á–µ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å –∏–º–µ–Ω–Ω–æ —É –Ω–∞—Å? –ß—Ç–æ –≤–∞—Å –ø—Ä–∏–≤–ª–µ–∫–∞–µ—Ç –≤ –¥–∞–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏?',
    ];

    return step < questions.length ? questions[step] : null;
  };

  const handleTextSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    sendMessage(currentMessage, false);
  };

  const startVoiceRecording = async () => {
    setIsRecording(true);
    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Web Speech API
    
    // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–ø–∏—Å–∏ –≥–æ–ª–æ—Å–∞
    setTimeout(() => {
      setIsRecording(false);
      const mockVoiceText = "–≠—Ç–æ –ø—Ä–∏–º–µ—Ä –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω —Å–∏—Å—Ç–µ–º–æ–π";
      sendMessage(mockVoiceText, true);
    }, 3000);
  };

  const stopVoiceRecording = () => {
    setIsRecording(false);
  };

  const formatTime = (date: Date) => {
    return date.toLocaleTimeString('ru-RU', { 
      hour: '2-digit', 
      minute: '2-digit' 
    });
  };

  return (
    <div className="interview-page">
      <div className="interview-header">
        <h1>–°–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ</h1>
        <div className="progress-info">
          <span>–í–æ–ø—Ä–æ—Å {interviewStep} –∏–∑ {totalSteps}</span>
          <div className="progress-bar">
            <div 
              className="progress-fill"
              style={{ width: `${(interviewStep / totalSteps) * 100}%` }}
            ></div>
          </div>
        </div>
      </div>

      <div className="chat-container">
        <div className="messages-area">
          {messages.map((message) => (
            <div 
              key={message.id} 
              className={`message ${message.type}`}
            >
              <div className="message-content">
                <div className="message-text">{message.content}</div>
                <div className="message-meta">
                  <span className="message-time">{formatTime(message.timestamp)}</span>
                  {message.isVoice && <span className="voice-indicator">üé§</span>}
                </div>
              </div>
            </div>
          ))}
          {isProcessing && (
            <div className="message ai">
              <div className="message-content">
                <div className="typing-indicator">
                  <span></span>
                  <span></span>
                  <span></span>
                </div>
              </div>
            </div>
          )}
          <div ref={messagesEndRef} />
        </div>

        <div className="input-area">
          <div className="input-mode-switcher">
            <button 
              className={`mode-btn ${inputMode === 'text' ? 'active' : ''}`}
              onClick={() => setInputMode('text')}
              disabled={isProcessing}
            >
              ‚úèÔ∏è –¢–µ–∫—Å—Ç
            </button>
            <button 
              className={`mode-btn ${inputMode === 'voice' ? 'active' : ''}`}
              onClick={() => setInputMode('voice')}
              disabled={isProcessing}
            >
              üé§ –ì–æ–ª–æ—Å
            </button>
          </div>

          {inputMode === 'text' ? (
            <form onSubmit={handleTextSubmit} className="text-input-form">
              <div className="input-group">
                <textarea
                  value={currentMessage}
                  onChange={(e) => setCurrentMessage(e.target.value)}
                  placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç..."
                  className="message-input"
                  disabled={isProcessing}
                  rows={3}
                />
                <button 
                  type="submit" 
                  className="send-btn"
                  disabled={!currentMessage.trim() || isProcessing}
                >
                  –û—Ç–ø—Ä–∞–≤–∏—Ç—å
                </button>
              </div>
            </form>
          ) : (
            <div className="voice-input-area">
              <button 
                className={`voice-btn ${isRecording ? 'recording' : ''}`}
                onClick={isRecording ? stopVoiceRecording : startVoiceRecording}
                disabled={isProcessing}
              >
                {isRecording ? '‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å' : 'üé§ –ù–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å'}
              </button>
              {isRecording && (
                <div className="recording-indicator">
                  <span className="recording-dot"></span>
                  –ò–¥–µ—Ç –∑–∞–ø–∏—Å—å...
                </div>
              )}
            </div>
          )}
        </div>
      </div>

      <div className="backend-info">
        <p>üîß –°–∞–º–∞—è —Å–ª–æ–∂–Ω–∞—è —á–∞—Å—Ç—å –¥–ª—è Backend: Real-time —Ü–∏–∫–ª (Google S2T ‚Üí Gemini (ML-2) ‚Üí Google TTS).</p>
      </div>
    </div>
  );
};

export default Interview;
