#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π HTTP —Å–µ—Ä–≤–µ—Ä –±–µ–∑ uvicorn –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
"""

import json
import http.server
import socketserver
from urllib.parse import urlparse, parse_qs
import threading
import time
import random

# –ü—Ä–æ—Å—Ç–∞—è —ç–º—É–ª—è—Ü–∏—è ML –æ–±—Ä–∞–±–æ—Ç–∫–∏
def simulate_ml_processing(audio_data):
    """–≠–º—É–ª–∏—Ä—É–µ—Ç ML –æ–±—Ä–∞–±–æ—Ç–∫—É –∞—É–¥–∏–æ"""
    time.sleep(2)  # –ò–º–∏—Ç–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –≤–æ–ø—Ä–æ—Å
    questions = [
        "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–µ–º –æ–ø—ã—Ç–µ —Ä–∞–±–æ—Ç—ã —Å Python",
        "–ö–∞–∫ –≤—ã —Ä–µ—à–∞–µ—Ç–µ —Å–ª–æ–∂–Ω—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏?", 
        "–ö–∞–∫–æ–π –≤–∞—à –ª—é–±–∏–º—ã–π —Ñ—Ä–µ–π–º–≤–æ—Ä–∫ –∏ –ø–æ—á–µ–º—É?",
        "–û–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –ø–æ–¥—Ö–æ–¥ –∫ –æ—Ç–ª–∞–¥–∫–µ –∫–æ–¥–∞",
        "–ö–∞–∫ –≤—ã –∏–∑—É—á–∞–µ—Ç–µ –Ω–æ–≤—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏?"
    ]
    
    return {
        "status": "processed",
        "question": random.choice(questions),
        "confidence": round(random.uniform(0.7, 0.95), 2),
        "transcript": "–≠–º—É–ª—è—Ü–∏—è —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞...",
        "analysis": {
            "technical_level": random.randint(6, 10),
            "communication": random.randint(7, 10),
            "confidence": random.randint(5, 9)
        }
    }

class AIHRHandler(http.server.BaseHTTPRequestHandler):
    def do_OPTIONS(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ CORS preflight –∑–∞–ø—Ä–æ—Å–æ–≤"""
        self.send_response(200)
        self.send_header('Access-Control-Allow-Origin', '*')
        self.send_header('Access-Control-Allow-Methods', 'GET, POST, OPTIONS')
        self.send_header('Access-Control-Allow-Headers', 'Content-Type')
        self.end_headers()

    def do_GET(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ GET –∑–∞–ø—Ä–æ—Å–æ–≤"""
        parsed_path = urlparse(self.path)
        
        # CORS headers
        self.send_response(200)
        self.send_header('Access-Control-Allow-Origin', '*')
        self.send_header('Content-type', 'application/json')
        self.end_headers()
        
        if parsed_path.path == '/api/health':
            response = {"status": "OK", "message": "Simple HTTP server is running"}
            self.wfile.write(json.dumps(response).encode())
        elif parsed_path.path == '/api/hr/interviews':
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∞—Å—Å–∏–≤ –∏–Ω—Ç–µ—Ä–≤—å—é (–Ω–µ –æ–±—ä–µ–∫—Ç —Å –ø–æ–ª–µ–º interviews)
            response = [
                {
                    "id": "demo-interview-1",
                    "candidateName": "–¢–µ—Å—Ç–æ–≤—ã–π –ö–∞–Ω–¥–∏–¥–∞—Ç",
                    "position": "Frontend Developer",
                    "status": "completed",
                    "createdAt": "2025-09-09",
                    "score": 85
                },
                {
                    "id": "demo-interview-2", 
                    "candidateName": "–î—Ä—É–≥–æ–π –ö–∞–Ω–¥–∏–¥–∞—Ç",
                    "position": "Backend Developer",
                    "status": "in_progress",
                    "createdAt": "2025-09-09"
                }
            ]
            self.wfile.write(json.dumps(response).encode())
        elif parsed_path.path.startswith('/ws/interview/'):
            # WebSocket —ç–º—É–ª—è—Ü–∏—è –¥–ª—è –∏–Ω—Ç–µ—Ä–≤—å—é
            session_id = parsed_path.path.split('/')[-1]
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–º–∏—Ç–∞—Ü–∏—é WebSocket –æ—Ç–≤–µ—Ç–∞
            self.send_response(200)
            self.send_header('Content-type', 'application/json')
            self.end_headers()
            
            # –≠–º—É–ª–∏—Ä—É–µ–º ML –æ–±—Ä–∞–±–æ—Ç–∫—É
            ml_result = simulate_ml_processing("audio_data")
            
            response = {
                "type": "question",
                "message": ml_result["question"],
                "question_number": 1,
                "ml_analysis": ml_result["analysis"]
            }
            self.wfile.write(json.dumps(response).encode())
            print(f"ü§ñ ML Processing for session {session_id}: {ml_result['question']}")
        elif parsed_path.path.startswith('/api/hr/results/'):
            # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–Ω—Ç–µ—Ä–≤—å—é
            interview_id = parsed_path.path.split('/')[-1]
            response = {
                "interview_id": interview_id,
                "candidate_name": "–¢–µ—Å—Ç–æ–≤—ã–π –ö–∞–Ω–¥–∏–¥–∞—Ç",
                "position": "Frontend Developer", 
                "total_score": 85,
                "details": {
                    "technical_skills": 90,
                    "communication": 80,
                    "problem_solving": 85
                },
                "feedback": "–•–æ—Ä–æ—à–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–∞–≤—ã–∫–∏, –æ—Ç–ª–∏—á–Ω–∞—è –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è",
                "status": "completed",
                "google_sheets_url": "https://docs.google.com/spreadsheets/d/demo123/edit"
            }
            self.wfile.write(json.dumps(response).encode())
        else:
            self.send_response(404)
            response = {"error": "Not found"}
            self.wfile.write(json.dumps(response).encode())

    def do_POST(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ POST –∑–∞–ø—Ä–æ—Å–æ–≤"""
        parsed_path = urlparse(self.path)
        
        # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞
        content_length = int(self.headers.get('Content-Length', 0))
        post_data = b''
        if content_length > 0:
            post_data = self.rfile.read(content_length)
        
        # CORS headers
        self.send_response(200)
        self.send_header('Access-Control-Allow-Origin', '*')
        self.send_header('Content-type', 'application/json')
        self.end_headers()
        
        if parsed_path.path == '/api/hr/interviews':
            # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤—å—é
            try:
                data = json.loads(post_data.decode('utf-8')) if post_data else {}
            except:
                data = {}
            
            response = {
                "id": "simple-interview-123",
                "status": "created",
                "message": "Interview created successfully via simple HTTP server",
                "data": data,
                "google_sheets_url": "https://docs.google.com/spreadsheets/d/demo123/edit"
            }
            self.wfile.write(json.dumps(response).encode())
            print(f"‚úÖ Interview created: {data.get('title', 'Untitled')}")
            
        elif parsed_path.path == '/api/hr/upload-multi':
            response = {
                "status": "OK",
                "message": "Files uploaded successfully",
                "files": []
            }
            self.wfile.write(json.dumps(response).encode())
            print("üìÅ Files uploaded")
            
        else:
            self.send_response(404)
            response = {"error": "Not found"}
            self.wfile.write(json.dumps(response).encode())

    def log_message(self, format, *args):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤"""
        print(f"[{self.address_string()}] {format % args}")

if __name__ == "__main__":
    PORT = 8000
    HOST = "127.0.0.1"
    
    print(f"üåê –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å—Ç–æ–≥–æ HTTP —Å–µ—Ä–≤–µ—Ä–∞...")
    print(f"üì° API –¥–æ—Å—Ç—É–ø–Ω–æ: http://{HOST}:{PORT}")
    print(f"üîó Health check: http://{HOST}:{PORT}/api/health")
    print(f"üíº Create interview: POST http://{HOST}:{PORT}/api/hr/interviews")
    
    with socketserver.TCPServer((HOST, PORT), AIHRHandler) as httpd:
        print(f"‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ {HOST}:{PORT}")
        try:
            httpd.serve_forever()
        except KeyboardInterrupt:
            print("\nüõë –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
