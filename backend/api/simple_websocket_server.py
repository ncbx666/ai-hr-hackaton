#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π WebSocket —Å–µ—Ä–≤–µ—Ä –¥–ª—è –∏–Ω—Ç–µ—Ä–≤—å—é –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
"""

import socket
import threading
import json
import hashlib
import base64
import struct
import time
import random
from datetime import datetime

class SimpleWebSocketServer:
    def __init__(self, host='localhost', port=8001):
        self.host = host
        self.port = port
        self.clients = {}
        
    def websocket_handshake(self, client_socket, headers):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç WebSocket handshake"""
        print("ü§ù –ù–∞—á–∏–Ω–∞–µ–º WebSocket handshake")
        print(f"üìã Headers:\n{headers[:500]}...")
        
        key = None
        for line in headers.split('\r\n'):
            if line.lower().startswith('sec-websocket-key'):
                key = line.split(':')[1].strip()
                print(f"üîë –ù–∞–π–¥–µ–Ω WebSocket –∫–ª—é—á: {key}")
                break
        
        if not key:
            print("‚ùå Sec-WebSocket-Key –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö")
            return False
            
        magic_string = "258EAFA5-E914-47DA-95CA-C5AB0DC85B11"
        accept_key = base64.b64encode(
            hashlib.sha1((key + magic_string).encode()).digest()
        ).decode()
        
        print(f"‚úÖ Accept –∫–ª—é—á —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {accept_key}")
        
        response = (
            "HTTP/1.1 101 Switching Protocols\r\n"
            "Upgrade: websocket\r\n"
            "Connection: Upgrade\r\n"
            f"Sec-WebSocket-Accept: {accept_key}\r\n"
            "\r\n"
        )
        
        try:
            sent_bytes = client_socket.send(response.encode())
            print(f"üì§ Handshake –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω ({sent_bytes} –±–∞–π—Ç)")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ handshake: {e}")
            return False
    
    def send_websocket_message(self, client_socket, message):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ WebSocket"""
        try:
            message_bytes = message.encode('utf-8')
            message_length = len(message_bytes)
            
            if message_length <= 125:
                header = struct.pack('!BB', 0x81, message_length)
            elif message_length <= 65535:
                header = struct.pack('!BBH', 0x81, 126, message_length)
            else:
                header = struct.pack('!BBQ', 0x81, 127, message_length)
            
            sent = client_socket.send(header + message_bytes)
            print(f"üì§ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ({sent} –±–∞–π—Ç): {message[:100]}...")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return False
    
    def handle_client(self, client_socket, client_address):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞"""
        print(f"üîó –ù–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: {client_address}")
        
        try:
            # –ß–∏—Ç–∞–µ–º HTTP –∑–∞–≥–æ–ª–æ–≤–∫–∏
            request = client_socket.recv(4096).decode('utf-8')
            print(f"üì® –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å:\n{request[:500]}...")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º session_id –∏–∑ –ø—É—Ç–∏
            session_id = "demo-session"
            for line in request.split('\r\n'):
                if line.startswith('GET'):
                    path = line.split()[1]
                    print(f"üìç –ü—É—Ç—å –∑–∞–ø—Ä–æ—Å–∞: {path}")
                    if '/ws/interview/' in path:
                        session_id = path.split('/')[-1]
                    break
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º handshake
            if not self.websocket_handshake(client_socket, request):
                print("‚ùå Handshake –Ω–µ —É–¥–∞–ª—Å—è")
                client_socket.close()
                return
            
            print(f"‚úÖ Handshake —É—Å–ø–µ—à–Ω—ã–π")
            self.clients[session_id] = client_socket
            print(f"‚úÖ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è —Å–µ—Å—Å–∏–∏: {session_id}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            welcome_msg = json.dumps({
                "type": "welcome",
                "message": f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–Ω—Ç–µ—Ä–≤—å—é! –°–µ—Å—Å–∏—è: {session_id}"
            })
            
            if self.send_websocket_message(client_socket, welcome_msg):
                print("üì§ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
            
            # –°–∏–º—É–ª–∏—Ä—É–µ–º ML –≤–æ–ø—Ä–æ—Å—ã
            self.simulate_interview(client_socket, session_id)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞: {e}")
        finally:
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            try:
                client_socket.close()
            except:
                pass
            
            if session_id in self.clients:
                del self.clients[session_id]
            
            print(f"üîå –ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è: {session_id}")
    
    def simulate_interview(self, client_socket, session_id):
        """–°–∏–º—É–ª–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∏–Ω—Ç–µ—Ä–≤—å—é"""
        questions = [
            "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ –∏ –≤–∞—à–µ–º –æ–ø—ã—Ç–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏",
            "–ö–∞–∫–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –≤—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –≤ —Ä–∞–±–æ—Ç–µ?",
            "–ö–∞–∫ –≤—ã —Ä–µ—à–∞–µ—Ç–µ —Å–ª–æ–∂–Ω—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏?",
            "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–≤–æ–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–º –ø—Ä–æ–µ–∫—Ç–µ",
            "–ö–∞–∫–∏–µ —É –≤–∞—Å –ø–ª–∞–Ω—ã –Ω–∞ —Ä–∞–∑–≤–∏—Ç–∏–µ –≤ IT?"
        ]
        
        time.sleep(2)
        
        # –ó–∞–¥–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º
        for i, question in enumerate(questions):
            if session_id not in self.clients:
                break
                
            question_msg = json.dumps({
                "type": "question",
                "message": question,
                "question_number": i + 1
            })
            
            if self.send_websocket_message(client_socket, question_msg):
                print(f"‚ùì –í–æ–ø—Ä–æ—Å {i+1} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {question}")
            
            # –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            time.sleep(5)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
            if session_id in self.clients:
                response_msg = json.dumps({
                    "type": "transcript", 
                    "text": "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É...",
                    "is_final": True
                })
                self.send_websocket_message(client_socket, response_msg)
            
            time.sleep(2)
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º –∏–Ω—Ç–µ—Ä–≤—å—é
        if session_id in self.clients:
            end_msg = json.dumps({
                "type": "interview_ended",
                "message": "–ò–Ω—Ç–µ—Ä–≤—å—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã..."
            })
            self.send_websocket_message(client_socket, end_msg)
            
            time.sleep(3)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            result_msg = json.dumps({
                "type": "processing_completed",
                "message": "–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–æ—Ç–æ–≤—ã.",
                "processing_result": {
                    "status": "completed",
                    "total_score": random.randint(75, 95),
                    "feedback": "–û—Ç–ª–∏—á–Ω–æ–µ –∏–Ω—Ç–µ—Ä–≤—å—é! –•–æ—Ä–æ—à–∏–µ –æ—Ç–≤–µ—Ç—ã."
                },
                "redirect_to": "/hr/results"
            })
            self.send_websocket_message(client_socket, result_msg)
    
    def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä"""
        server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        server_socket.bind((self.host, self.port))
        server_socket.listen(5)
        
        print(f"üöÄ WebSocket —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ {self.host}:{self.port}")
        print(f"üì° –î–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: ws://{self.host}:{self.port}/ws/interview/{{session_id}}")
        
        try:
            while True:
                client_socket, client_address = server_socket.accept()
                client_thread = threading.Thread(
                    target=self.handle_client,
                    args=(client_socket, client_address)
                )
                client_thread.daemon = True
                client_thread.start()
        except KeyboardInterrupt:
            print("\nüõë –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        finally:
            server_socket.close()

if __name__ == "__main__":
    server = SimpleWebSocketServer()
    server.start()
