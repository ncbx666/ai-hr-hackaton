"""
Google Sheets –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –¥–ª—è HR —Å–∏—Å—Ç–µ–º—ã
"""
import json
import logging
from typing import Dict, Any, Optional, List
from datetime import datetime
import asyncio
import traceback
import os
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –ª–æ–≥–æ–≤ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
logs_dir = Path("logs")
logs_dir.mkdir(exist_ok=True)

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º file handler –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –ª–æ–≥–æ–≤ Google Sheets
file_handler = logging.FileHandler(logs_dir / "google_sheets.log", encoding='utf-8')
file_handler.setLevel(logging.DEBUG)
file_formatter = logging.Formatter(
    '%(asctime)s - %(name)s - %(levelname)s - %(funcName)s:%(lineno)d - %(message)s'
)
file_handler.setFormatter(file_formatter)
logger.addHandler(file_handler)

# Console handler –¥–ª—è –≤–∞–∂–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
console_handler = logging.StreamHandler()
console_handler.setLevel(logging.INFO)
console_formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
console_handler.setFormatter(console_formatter)
logger.addHandler(console_handler)

class GoogleSheetsService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Google Sheets"""
    
    def __init__(self):
        # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é
        # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∑–¥–µ—Å—å –±—É–¥—É—Ç –Ω–∞—Å—Ç–æ—è—â–∏–µ API –∫–ª—é—á–∏ Google Sheets
        self.sheets_api_key = "demo_key"
        self.demo_sheet_id = "1BxiMVs0XRA5nFMdKvBdBZjgmUUqptlbs74OgvE2upms"
        self.operation_log = []  # –õ–æ–≥ –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        self.error_log = []      # –õ–æ–≥ –æ—à–∏–±–æ–∫
        logger.info("[GoogleSheetsService] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º")
    
    def _log_operation(self, operation: str, data: Dict[str, Any], success: bool = True, error: str = None):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏—é Google Sheets"""
        log_entry = {
            "timestamp": datetime.now().isoformat(),
            "operation": operation,
            "data": data,
            "success": success,
            "error": error
        }
        
        self.operation_log.append(log_entry)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ª–æ–≥–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 –æ–ø–µ—Ä–∞—Ü–∏–π)
        if len(self.operation_log) > 100:
            self.operation_log = self.operation_log[-100:]
        
        if success:
            logger.info(f"‚úÖ Google Sheets –æ–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞: {operation}")
            logger.debug(f"–î–µ—Ç–∞–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏: {json.dumps(data, ensure_ascii=False, indent=2)}")
        else:
            logger.error(f"‚ùå Google Sheets –æ–ø–µ—Ä–∞—Ü–∏—è –Ω–µ—É—Å–ø–µ—à–Ω–∞: {operation}")
            logger.error(f"–û—à–∏–±–∫–∞: {error}")
            logger.debug(f"–î–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏: {json.dumps(data, ensure_ascii=False, indent=2)}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ª–æ–≥ –æ—à–∏–±–æ–∫
            error_entry = {
                "timestamp": datetime.now().isoformat(),
                "operation": operation,
                "error": error,
                "data": data,
                "traceback": traceback.format_exc() if error else None
            }
            self.error_log.append(error_entry)
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ª–æ–≥–∞ –æ—à–∏–±–æ–∫ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 –æ—à–∏–±–æ–∫)
            if len(self.error_log) > 50:
                self.error_log = self.error_log[-50:]
    
    def get_operation_logs(self, limit: int = 20) -> List[Dict[str, Any]]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏ –æ–ø–µ—Ä–∞—Ü–∏–π"""
        return self.operation_log[-limit:] if self.operation_log else []
    
    def get_error_logs(self, limit: int = 10) -> List[Dict[str, Any]]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏ –æ—à–∏–±–æ–∫"""
        return self.error_log[-limit:] if self.error_log else []
    
    def get_statistics(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–ø–µ—Ä–∞—Ü–∏–π Google Sheets"""
        total_operations = len(self.operation_log)
        successful_operations = len([op for op in self.operation_log if op["success"]])
        failed_operations = total_operations - successful_operations
        
        recent_operations = self.operation_log[-10:] if self.operation_log else []
        
        return {
            "total_operations": total_operations,
            "successful_operations": successful_operations,
            "failed_operations": failed_operations,
            "success_rate": (successful_operations / total_operations * 100) if total_operations > 0 else 0,
            "recent_operations": recent_operations,
            "recent_errors": self.get_error_logs(5)
        }

    async def create_interview_sheet(self, interview_data: Dict[str, Any]) -> str:
        """
        –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é Google —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è
        Returns: URL —Ç–∞–±–ª–∏—Ü—ã
        """
        operation_data = {
            "interview_id": interview_data.get('id'),
            "position": interview_data.get('position'),
            "operation_type": "create_sheet"
        }
        
        try:
            logger.info(f"üöÄ –ù–∞—á–∏–Ω–∞—é —Å–æ–∑–¥–∞–Ω–∏–µ Google —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –∏–Ω—Ç–µ—Ä–≤—å—é {interview_data.get('id')}")
            
            # –°–∏–º—É–ª—è—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è Google Sheet
            sheet_id = f"interview_{interview_data.get('id', 'unknown')}_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º URL Google —Ç–∞–±–ª–∏—Ü—ã
            sheets_url = f"https://docs.google.com/spreadsheets/d/{sheet_id}/edit#gid=0"
            
            # –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–ø–∏—Å–∏ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            initial_data = {
                "–ò–Ω—Ç–µ—Ä–≤—å—é ID": interview_data.get('id'),
                "–ü–æ–∑–∏—Ü–∏—è": interview_data.get('position'),
                "–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è": datetime.now().isoformat(),
                "–°—Ç–∞—Ç—É—Å": "–°–æ–∑–¥–∞–Ω–æ",
                "–ö–∞–Ω–¥–∏–¥–∞—Ç": "–û–∂–∏–¥–∞–µ—Ç—Å—è",
                "–†–µ–∑—É–ª—å—Ç–∞—Ç": "–í –ø—Ä–æ—Ü–µ—Å—Å–µ"
            }
            
            # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç API –≤—ã–∑–æ–≤ –∫ Google Sheets
            await self._simulate_sheet_creation(sheet_id, initial_data)
            
            operation_data["sheet_id"] = sheet_id
            operation_data["sheets_url"] = sheets_url
            operation_data["initial_data"] = initial_data
            
            self._log_operation("create_interview_sheet", operation_data, success=True)
            logger.info(f"‚úÖ Google —Ç–∞–±–ª–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ: {sheets_url}")
            return sheets_url
            
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Google —Ç–∞–±–ª–∏—Ü—ã: {e}"
            self._log_operation("create_interview_sheet", operation_data, success=False, error=error_msg)
            logger.error(f"‚ùå {error_msg}")
            logger.error(f"Traceback: {traceback.format_exc()}")
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º demo URL –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            fallback_url = f"https://docs.google.com/spreadsheets/d/demo_{interview_data.get('id')}/edit"
            logger.warning(f"üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback URL: {fallback_url}")
            return fallback_url
    
    async def update_interview_results(self, interview_id: str, results_data: Dict[str, Any]) -> bool:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è –≤ Google —Ç–∞–±–ª–∏—Ü–µ
        """
        operation_data = {
            "interview_id": interview_id,
            "operation_type": "update_results",
            "candidate_name": results_data.get('candidate_name'),
            "final_score": results_data.get('final_score_percent')
        }
        
        try:
            logger.info(f"üîÑ –ù–∞—á–∏–Ω–∞—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –∏–Ω—Ç–µ—Ä–≤—å—é {interview_id}")
            
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–ø–∏—Å–∏
            update_data = {
                "–ö–∞–Ω–¥–∏–¥–∞—Ç": results_data.get('candidate_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'),
                "–§–∏–Ω–∞–ª—å–Ω—ã–π –±–∞–ª–ª": f"{results_data.get('final_score_percent', 0)}%",
                "–í–µ—Ä–¥–∏–∫—Ç": results_data.get('verdict', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω'),
                "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–∞–≤—ã–∫–∏": f"{results_data.get('breakdown', {}).get('hard_skills', {}).get('score_percent', 0)}%",
                "–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã": f"{results_data.get('breakdown', {}).get('experience', {}).get('score_percent', 0)}%",
                "Soft Skills": f"{results_data.get('breakdown', {}).get('soft_skills', {}).get('score_percent', 0)}%",
                "–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è": datetime.now().isoformat()
            }
            
            # –°–∏–º—É–ª—è—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Google Sheet
            await self._simulate_sheet_update(interview_id, update_data)
            
            operation_data["update_data"] = update_data
            self._log_operation("update_interview_results", operation_data, success=True)
            
            logger.info(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è –∏–Ω—Ç–µ—Ä–≤—å—é {interview_id}")
            return True
            
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}"
            self._log_operation("update_interview_results", operation_data, success=False, error=error_msg)
            logger.error(f"‚ùå {error_msg}")
            logger.error(f"Traceback: {traceback.format_exc()}")
            return False
    
    async def get_interview_sheet_url(self, interview_id: str) -> Optional[str]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç URL Google —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤—å—é
        """
        operation_data = {
            "interview_id": interview_id,
            "operation_type": "get_sheet_url"
        }
        
        try:
            logger.info(f"üîç –ü–æ–ª—É—á–µ–Ω–∏–µ URL —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –∏–Ω—Ç–µ—Ä–≤—å—é {interview_id}")
            
            # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ –ë–î –∏–ª–∏ Google Sheets API
            sheet_id = f"interview_{interview_id}"
            sheets_url = f"https://docs.google.com/spreadsheets/d/{sheet_id}/edit#gid=0"
            
            operation_data["sheet_id"] = sheet_id
            operation_data["sheets_url"] = sheets_url
            
            self._log_operation("get_interview_sheet_url", operation_data, success=True)
            logger.info(f"‚úÖ URL —Ç–∞–±–ª–∏—Ü—ã –Ω–∞–π–¥–µ–Ω –¥–ª—è –∏–Ω—Ç–µ—Ä–≤—å—é {interview_id}: {sheets_url}")
            return sheets_url
            
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è URL —Ç–∞–±–ª–∏—Ü—ã: {e}"
            self._log_operation("get_interview_sheet_url", operation_data, success=False, error=error_msg)
            logger.error(f"‚ùå {error_msg}")
            logger.error(f"Traceback: {traceback.format_exc()}")
            return None
    
    async def _simulate_sheet_creation(self, sheet_id: str, data: Dict[str, Any]):
        """–°–∏–º—É–ª—è—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è Google —Ç–∞–±–ª–∏—Ü—ã"""
        await asyncio.sleep(0.5)  # –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ API
        logger.debug(f"[GoogleSheetsService] –°–∏–º—É–ª—è—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã {sheet_id} —Å –¥–∞–Ω–Ω—ã–º–∏: {data}")
    
    async def _simulate_sheet_update(self, interview_id: str, data: Dict[str, Any]):
        """–°–∏–º—É–ª—è—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Google —Ç–∞–±–ª–∏—Ü—ã"""
        await asyncio.sleep(0.3)  # –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ API
        logger.debug(f"[GoogleSheetsService] –°–∏–º—É–ª—è—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –∏–Ω—Ç–µ—Ä–≤—å—é {interview_id}: {data}")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
google_sheets_service = GoogleSheetsService()
