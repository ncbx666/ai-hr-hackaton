import socket
import threading
import json
import time
import base64
import hashlib
import struct
import random

class WebSocketServer:
    def __init__(self, host='localhost', port=8001):
        self.host = host
        self.port = port
        self.clients = {}
        
    def websocket_handshake(self, client_socket, headers):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç WebSocket handshake"""
        print("ü§ù –ù–∞—á–∏–Ω–∞–µ–º WebSocket handshake")
        print(f"üìã Headers:\n{headers}")
        
        key = None
        for line in headers.split('\r\n'):
            print(f"  –°—Ç—Ä–æ–∫–∞: '{line}'")
            if line.lower().startswith('sec-websocket-key'):
                key = line.split(':', 1)[1].strip()
                print(f"üîë –ù–∞–π–¥–µ–Ω WebSocket –∫–ª—é—á: '{key}'")
                break
        
        if not key:
            print("‚ùå Sec-WebSocket-Key –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö!")
            return False
            
        magic_string = "258EAFA5-E914-47DA-95CA-C5AB0DC85B11"
        accept_key = base64.b64encode(
            hashlib.sha1((key + magic_string).encode()).digest()
        ).decode()
        
        print(f"‚úÖ Accept –∫–ª—é—á —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: '{accept_key}'")
        
        response = (
            "HTTP/1.1 101 Switching Protocols\r\n"
            "Upgrade: websocket\r\n"
            "Connection: Upgrade\r\n"
            f"Sec-WebSocket-Accept: {accept_key}\r\n"
            "\r\n"
        )
        
        try:
            sent_bytes = client_socket.send(response.encode())
            print(f"üì§ Handshake –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω ({sent_bytes} –±–∞–π—Ç)")
            print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç:\n{response}")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ handshake: {e}")
            return False
    
    def send_websocket_message(self, client_socket, message):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ WebSocket"""
        try:
            message_bytes = message.encode('utf-8')
            message_length = len(message_bytes)
            
            if message_length <= 125:
                header = struct.pack('!BB', 0x81, message_length)
            elif message_length <= 65535:
                header = struct.pack('!BBH', 0x81, 126, message_length)
            else:
                header = struct.pack('!BBQ', 0x81, 127, message_length)
            
            sent = client_socket.send(header + message_bytes)
            print(f"üì§ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ({sent} –±–∞–π—Ç): {message[:100]}...")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return False
    
    def handle_client(self, client_socket, client_address):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞"""
        print(f"üîó –ù–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç: {client_address}")
        session_id = "demo-session"
        
        try:
            # –ß–∏—Ç–∞–µ–º HTTP –∑–∞–≥–æ–ª–æ–≤–∫–∏
            print("üì• –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞...")
            request_data = client_socket.recv(4096)
            print(f"üì• –ü–æ–ª—É—á–µ–Ω–æ {len(request_data)} –±–∞–π—Ç")
            
            request = request_data.decode('utf-8', errors='ignore')
            print(f"üì® –ü–æ–ª—É—á–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å:\n{request}")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º session_id –∏–∑ –ø—É—Ç–∏
            for line in request.split('\r\n'):
                if line.startswith('GET'):
                    path = line.split()[1]
                    print(f"üìç –ü—É—Ç—å –∑–∞–ø—Ä–æ—Å–∞: {path}")
                    if '/ws/interview/' in path:
                        session_id = path.split('/')[-1]
                    break
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º handshake
            if not self.websocket_handshake(client_socket, request):
                print("‚ùå Handshake –Ω–µ —É–¥–∞–ª—Å—è")
                client_socket.close()
                return
            
            print(f"‚úÖ Handshake —É—Å–ø–µ—à–Ω—ã–π –¥–ª—è —Å–µ—Å—Å–∏–∏: {session_id}")
            self.clients[session_id] = client_socket
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            welcome_msg = json.dumps({
                "type": "welcome",
                "message": f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–Ω—Ç–µ—Ä–≤—å—é! –°–µ—Å—Å–∏—è: {session_id}",
                "timestamp": time.time()
            })
            
            if self.send_websocket_message(client_socket, welcome_msg):
                print("üì§ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
            
            # –°–∏–º—É–ª–∏—Ä—É–µ–º ML –≤–æ–ø—Ä–æ—Å—ã
            self.simulate_interview(client_socket, session_id)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞: {e}")
            import traceback
            traceback.print_exc()
        finally:
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            try:
                client_socket.close()
                print(f"üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å {client_address} –∑–∞–∫—Ä—ã—Ç–æ")
            except:
                pass
            
            if session_id in self.clients:
                del self.clients[session_id]
                print(f"üîå –ö–ª–∏–µ–Ω—Ç —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞: {session_id}")

    def simulate_interview(self, client_socket, session_id):
        """–°–∏–º—É–ª–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∏–Ω—Ç–µ—Ä–≤—å—é"""
        questions = [
            "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ",
            "–ö–∞–∫–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –≤—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ?",
            "–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –≤ –∫–æ–º–∞–Ω–¥–µ?",
        ]
        
        print(f"üé§ –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω—Ç–µ—Ä–≤—å—é –¥–ª—è —Å–µ—Å—Å–∏–∏: {session_id}")
        time.sleep(2)
        
        for i, question in enumerate(questions):
            if session_id not in self.clients:
                print(f"‚ö†Ô∏è –ö–ª–∏–µ–Ω—Ç {session_id} –æ—Ç–∫–ª—é—á–∏–ª—Å—è")
                break
                
            question_msg = json.dumps({
                "type": "question",
                "message": question,
                "question_number": i + 1,
                "timestamp": time.time()
            })
            
            if self.send_websocket_message(client_socket, question_msg):
                print(f"‚ùì –í–æ–ø—Ä–æ—Å {i+1} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {question}")
            
            time.sleep(3)
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º –∏–Ω—Ç–µ—Ä–≤—å—é
        if session_id in self.clients:
            end_msg = json.dumps({
                "type": "interview_ended",
                "message": "–ò–Ω—Ç–µ—Ä–≤—å—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ!",
                "timestamp": time.time()
            })
            self.send_websocket_message(client_socket, end_msg)
    
    def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä"""
        print(f"üöÄ –°–æ–∑–¥–∞–µ–º —Å–æ–∫–µ—Ç –Ω–∞ {self.host}:{self.port}")
        server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        
        try:
            server_socket.bind((self.host, self.port))
            print(f"‚úÖ –°–æ–∫–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω –∫ {self.host}:{self.port}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏ —Å–æ–∫–µ—Ç–∞: {e}")
            return
            
        server_socket.listen(5)
        print(f"üéØ –°–µ—Ä–≤–µ—Ä —Å–ª—É—à–∞–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
        print(f"üì° –î–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: ws://{self.host}:{self.port}/ws/interview/{{session_id}}")
        
        try:
            while True:
                print("‚è≥ –ñ–¥–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
                client_socket, client_address = server_socket.accept()
                print(f"üéâ –ü—Ä–∏–Ω—è—Ç–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç {client_address}")
                
                client_thread = threading.Thread(
                    target=self.handle_client,
                    args=(client_socket, client_address)
                )
                client_thread.daemon = True
                client_thread.start()
                print(f"üßµ –ó–∞–ø—É—â–µ–Ω –ø–æ—Ç–æ–∫ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {client_address}")
                
        except KeyboardInterrupt:
            print("\nüõë –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
        finally:
            server_socket.close()

if __name__ == "__main__":
    server = WebSocketServer()
    server.start()
