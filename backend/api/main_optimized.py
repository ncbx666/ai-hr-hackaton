"""
AI-HR Backend - –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ª–µ–Ω–∏–≤—É—é –∑–∞–≥—Ä—É–∑–∫—É –∏–º–ø–æ—Ä—Ç–æ–≤ –∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
"""

import os
from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
from pydantic import BaseModel
from typing import List, Optional
import json
import uuid
from datetime import datetime

# –ë—ã—Å—Ç—Ä–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
from dotenv import load_dotenv
load_dotenv()

# –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
DATABASE_URL = os.getenv("DATABASE_URL", "sqlite:///./ai_hr_hackaton.db")
DEBUG = os.getenv("DEBUG", "False").lower() == "true"

print(f"‚ö° [FastStart] Database: {DATABASE_URL}")
print(f"‚ö° [FastStart] Debug: {DEBUG}")

# –ë—ã—Å—Ç—Ä–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FastAPI
app = FastAPI(
    title="AI-HR Backend API",
    description="Optimized for fast startup",
    version="1.0.0",
    docs_url="/docs" if DEBUG else None,
    redoc_url="/redoc" if DEBUG else None
)

# CORS - –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://localhost:3000", "http://127.0.0.1:3000"],
    allow_credentials=True,
    allow_methods=["GET", "POST", "PUT", "DELETE"],
    allow_headers=["*"]
)

# –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö
class ResumeInfo(BaseModel):
    filename: str
    url: str

class InterviewCreate(BaseModel):
    position: str
    job_description: str
    resumes: List[ResumeInfo]

class Interview(BaseModel):
    id: str
    position: str
    job_description: str
    resumes: List[ResumeInfo]
    status: str
    results_url: Optional[str]

# –õ–µ–Ω–∏–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
_google_sheets_service = None
_monitoring_router = None

def get_google_sheets_service():
    """–õ–µ–Ω–∏–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ Google Sheets —Å–µ—Ä–≤–∏—Å–∞"""
    global _google_sheets_service
    if _google_sheets_service is None:
        try:
            from google_sheets_service import google_sheets_service
            _google_sheets_service = google_sheets_service
            print("‚úÖ Google Sheets —Å–µ—Ä–≤–∏—Å –∑–∞–≥—Ä—É–∂–µ–Ω")
        except ImportError as e:
            print(f"‚ö†Ô∏è Google Sheets –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            _google_sheets_service = None
    return _google_sheets_service

def get_monitoring_router():
    """–õ–µ–Ω–∏–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ä–æ—É—Ç–µ—Ä–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    global _monitoring_router
    if _monitoring_router is None:
        try:
            from monitoring_endpoints import router as monitoring_router
            _monitoring_router = monitoring_router
            print("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–æ—É—Ç–µ—Ä –∑–∞–≥—Ä—É–∂–µ–Ω")
        except ImportError as e:
            print(f"‚ö†Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            _monitoring_router = None
    return _monitoring_router

# –ë–∞–∑–æ–≤—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
@app.get("/")
async def root():
    """–ö–æ—Ä–Ω–µ–≤–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç"""
    return {
        "message": "AI-HR Backend API",
        "status": "running",
        "version": "1.0.0",
        "timestamp": datetime.now().isoformat()
    }

@app.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
    return {
        "status": "healthy",
        "database": "connected" if DATABASE_URL else "disconnected",
        "timestamp": datetime.now().isoformat()
    }

# –û—Å–Ω–æ–≤–Ω—ã–µ API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
@app.post("/api/hr/interviews", response_model=Interview)
async def create_interview(data: InterviewCreate):
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤—å—é"""
    try:
        interview_id = str(uuid.uuid4())
        print(f"üöÄ –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤—å—é: {interview_id}")
        
        # –ë—ã—Å—Ç—Ä–∞—è —Å–∏–º—É–ª—è—Ü–∏—è –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        interview_data = {
            'id': interview_id,
            'position': data.position,
            'job_description': data.job_description,
            'created_at': datetime.now().isoformat()
        }
        
        # –õ–µ–Ω–∏–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ Google Sheets –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        sheets_service = get_google_sheets_service()
        sheets_url = None
        
        if sheets_service:
            try:
                sheets_url = await sheets_service.create_interview_sheet(interview_data)
                print(f"‚úÖ Google —Ç–∞–±–ª–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∞: {sheets_url}")
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã: {e}")
                sheets_url = f"https://docs.google.com/spreadsheets/d/mock_{interview_id}/edit"
        
        # –ë—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç
        return Interview(
            id=interview_id,
            position=data.position,
            job_description=data.job_description,
            resumes=data.resumes,
            status="created",
            results_url=sheets_url
        )
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤—å—é: {e}")
        return JSONResponse(
            status_code=500,
            content={"error": "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤—å—é", "details": str(e)}
        )

@app.get("/api/hr/interviews")
async def get_interviews():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–Ω—Ç–µ—Ä–≤—å—é"""
    return {
        "interviews": [],
        "total": 0,
        "message": "–°–ø–∏—Å–æ–∫ –∏–Ω—Ç–µ—Ä–≤—å—é (–¥–µ–º–æ —Ä–µ–∂–∏–º)"
    }

@app.get("/api/hr/interviews/{interview_id}")
async def get_interview(interview_id: str):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤—å—é"""
    return {
        "id": interview_id,
        "status": "demo",
        "message": f"–ò–Ω—Ç–µ—Ä–≤—å—é {interview_id} (–¥–µ–º–æ —Ä–µ–∂–∏–º)"
    }

@app.post("/api/hr/score")
async def score_candidate(data: dict):
    """–ë—ã—Å—Ç—Ä–∞—è –æ—Ü–µ–Ω–∫–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞"""
    try:
        # –ë—ã—Å—Ç—Ä–∞—è –∏–º–∏—Ç–∞—Ü–∏—è —Å–∫–æ—Ä–∏–Ω–≥–∞
        score_data = {
            "candidate_name": data.get("candidate_name", "Test Candidate"),
            "final_score_percent": 85,
            "verdict": "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∫ –Ω–∞–π–º—É",
            "breakdown": {
                "hard_skills": {"score_percent": 90},
                "experience": {"score_percent": 80},
                "soft_skills": {"score_percent": 85}
            },
            "timestamp": datetime.now().isoformat()
        }
        
        # –õ–µ–Ω–∏–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ Google Sheets –¥–ª—è –∑–∞–ø–∏—Å–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        sheets_service = get_google_sheets_service()
        if sheets_service:
            try:
                await sheets_service.update_interview_results(
                    interview_id=data.get("interview_id", "demo_interview"),
                    results_data=score_data
                )
                print("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–ø–∏—Å–∞–Ω—ã –≤ Google Sheets")
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")
        
        return score_data
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–æ—Ä–∏–Ω–≥–∞: {e}")
        return JSONResponse(
            status_code=500,
            content={"error": "–û—à–∏–±–∫–∞ —Å–∫–æ—Ä–∏–Ω–≥–∞", "details": str(e)}
        )

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –æ–±—Ä–∞—â–µ–Ω–∏–∏
@app.on_event("startup")
async def startup_event():
    """–°–æ–±—ã—Ç–∏–µ –∑–∞–ø—É—Å–∫–∞ - —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ä–æ—É—Ç–µ—Ä–æ–≤"""
    monitoring_router = get_monitoring_router()
    if monitoring_router:
        app.include_router(monitoring_router)
        print("‚úÖ –†–æ—É—Ç–µ—Ä –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω")

# –ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
if __name__ == "__main__":
    import uvicorn
    print("üöÄ –ó–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ AI-HR Backend...")
    print("üì° API –¥–æ—Å—Ç—É–ø–Ω–æ: http://127.0.0.1:8000")
    print("üìñ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: http://127.0.0.1:8000/docs")
    
    uvicorn.run(
        "main_optimized:app",
        host="127.0.0.1",
        port=8000,
        reload=False,  # –û—Ç–∫–ª—é—á–∞–µ–º reload –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
        access_log=False,  # –û—Ç–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏ –¥–æ—Å—Ç—É–ø–∞
        log_level="error"  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    )
