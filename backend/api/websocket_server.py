#!/usr/bin/env python3
"""
WebSocket —Å–µ—Ä–≤–µ—Ä –¥–ª—è –∏–Ω—Ç–µ—Ä–≤—å—é —Å —ç–º—É–ª—è—Ü–∏–µ–π ML –æ–±—Ä–∞–±–æ—Ç–∫–∏
"""

import asyncio
import websockets
import json
import random
import time
import base64
from datetime import datetime

class InterviewWebSocketServer:
    def __init__(self):
        self.connected_clients = {}
        self.interview_sessions = {}
    
    async def simulate_ml_processing(self, audio_data, session_id):
        """–≠–º—É–ª–∏—Ä—É–µ—Ç ML –æ–±—Ä–∞–±–æ—Ç–∫—É –∞—É–¥–∏–æ"""
        print(f"ü§ñ [ML] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∞—É–¥–∏–æ –¥–ª—è —Å–µ—Å—Å–∏–∏ {session_id}...")
        
        # –ò–º–∏—Ç–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        await asyncio.sleep(2)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –≤–æ–ø—Ä–æ—Å
        questions = [
            "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–µ–º –æ–ø—ã—Ç–µ —Ä–∞–±–æ—Ç—ã —Å Python",
            "–ö–∞–∫ –≤—ã —Ä–µ—à–∞–µ—Ç–µ —Å–ª–æ–∂–Ω—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏?", 
            "–ö–∞–∫–æ–π –≤–∞—à –ª—é–±–∏–º—ã–π —Ñ—Ä–µ–π–º–≤–æ—Ä–∫ –∏ –ø–æ—á–µ–º—É?",
            "–û–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –ø–æ–¥—Ö–æ–¥ –∫ –æ—Ç–ª–∞–¥–∫–µ –∫–æ–¥–∞",
            "–ö–∞–∫ –≤—ã –∏–∑—É—á–∞–µ—Ç–µ –Ω–æ–≤—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏?",
            "–ö–∞–∫–∏–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã SOLID –≤—ã –∑–Ω–∞–µ—Ç–µ?",
            "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö",
            "–ö–∞–∫ —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç–µ —Å–≤–æ–π –∫–æ–¥?"
        ]
        
        return {
            "status": "processed",
            "question": random.choice(questions),
            "confidence": round(random.uniform(0.7, 0.95), 2),
            "transcript": "–≠–º—É–ª—è—Ü–∏—è —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞...",
            "analysis": {
                "technical_level": random.randint(6, 10),
                "communication": random.randint(7, 10),
                "confidence": random.randint(5, 9)
            }
        }
    
    async def handle_client(self, websocket, path):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞"""
        session_id = path.split('/')[-1]
        self.connected_clients[session_id] = websocket
        
        print(f"üîó –ö–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ —Å–µ—Å—Å–∏–∏ {session_id}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await websocket.send(json.dumps({
            "type": "welcome",
            "message": f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–Ω—Ç–µ—Ä–≤—å—é! –°–µ—Å—Å–∏—è: {session_id}"
        }))
        
        try:
            async for message in websocket:
                data = json.loads(message)
                await self.process_message(session_id, data, websocket)
                
        except websockets.exceptions.ConnectionClosed:
            print(f"üîå –ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è –æ—Ç —Å–µ—Å—Å–∏–∏ {session_id}")
        finally:
            if session_id in self.connected_clients:
                del self.connected_clients[session_id]
    
    async def process_message(self, session_id, data, websocket):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞"""
        message_type = data.get('type')
        
        if message_type == 'candidate_info':
            # –ü–æ–ª—É—á–∏–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–¥–∏–¥–∞—Ç–µ
            name = data.get('name', '–ö–∞–Ω–¥–∏–¥–∞—Ç')
            self.interview_sessions[session_id] = {
                'name': name,
                'start_time': datetime.now(),
                'questions_asked': 0
            }
            
            await websocket.send(json.dumps({
                "type": "info_received",
                "message": f"–°–ø–∞—Å–∏–±–æ, {name}! –ò–Ω—Ç–µ—Ä–≤—å—é –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã."
            }))
            
            # –ó–∞–¥–∞–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
            await asyncio.sleep(1)
            await websocket.send(json.dumps({
                "type": "question",
                "message": "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ –∏ –≤–∞—à–µ–º –æ–ø—ã—Ç–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏",
                "question_number": 1
            }))
            
        elif message_type == 'audio_chunk':
            # –ü–æ–ª—É—á–∏–ª–∏ –∞—É–¥–∏–æ —á—É–Ω–∫ - —ç–º—É–ª–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
            audio_data = data.get('data')
            
            # –ö–∞–∂–¥—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞–Ω–∫–æ–≤ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç
            if random.random() < 0.3:  # 30% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
                await websocket.send(json.dumps({
                    "type": "transcript",
                    "text": "–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç...",
                    "is_final": False
                }))
            
            # –ò–Ω–æ–≥–¥–∞ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å
            if random.random() < 0.1:  # 10% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
                session = self.interview_sessions.get(session_id, {})
                question_num = session.get('questions_asked', 0) + 1
                
                if question_num < 5:  # –ú–∞–∫—Å–∏–º—É–º 5 –≤–æ–ø—Ä–æ—Å–æ–≤
                    ml_result = await self.simulate_ml_processing(audio_data, session_id)
                    
                    await websocket.send(json.dumps({
                        "type": "question",
                        "message": ml_result["question"],
                        "question_number": question_num,
                        "ml_analysis": ml_result["analysis"]
                    }))
                    
                    self.interview_sessions[session_id]['questions_asked'] = question_num
        
        elif message_type == 'end_interview':
            # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤—å—é
            await websocket.send(json.dumps({
                "type": "interview_ended",
                "message": "–ò–Ω—Ç–µ—Ä–≤—å—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã...",
                "processing": True
            }))
            
            # –≠–º—É–ª–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            await asyncio.sleep(3)
            
            await websocket.send(json.dumps({
                "type": "processing_completed",
                "message": "–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–æ—Ç–æ–≤—ã.",
                "processing_result": {
                    "status": "completed",
                    "total_score": random.randint(70, 95),
                    "feedback": "–ò–Ω—Ç–µ—Ä–≤—å—é –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ!"
                },
                "redirect_to": "/hr/results"
            }))

if __name__ == "__main__":
    server = InterviewWebSocketServer()
    
    print("üöÄ –ó–∞–ø—É—Å–∫ WebSocket —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –∏–Ω—Ç–µ—Ä–≤—å—é...")
    print("üì° WebSocket –¥–æ—Å—Ç—É–ø–µ–Ω: ws://localhost:8001/ws/interview/{session_id}")
    
    start_server = websockets.serve(
        server.handle_client,
        "localhost", 
        8001,
        subprotocols=["chat"]
    )
    
    print("‚úÖ WebSocket —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 8001")
    
    asyncio.get_event_loop().run_until_complete(start_server)
    asyncio.get_event_loop().run_forever()
