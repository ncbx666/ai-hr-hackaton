#!/usr/bin/env python3
import os
from dotenv import load_dotenv
import google.generativeai as genai

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
api_key = os.getenv('GOOGLE_API_KEY')
print('Testing Google Generative AI...')
print('API Key found:', 'YES' if api_key else 'NO')
print('API Key (first 20 chars):', api_key[:20] + '...' if api_key else 'NONE')

try:
    genai.configure(api_key=api_key)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
    print('\nüîç Checking available models...')
    models = [m for m in genai.list_models() if 'generateContent' in m.supported_generation_methods]
    if models:
        model_name = models[0].name
        print(f'üìã Using model: {model_name}')
        
        model = genai.GenerativeModel(model_name)
        response = model.generate_content('–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç–µ—Å—Ç —Ä–∞–±–æ—Ç—ã API. –û—Ç–≤–µ—Ç—å –∫–æ—Ä–æ—Ç–∫–æ.')
        print('\n‚úÖ SUCCESS: API —Ä–∞–±–æ—Ç–∞–µ—Ç!')
        print('üìù –û—Ç–≤–µ—Ç –æ—Ç Gemini:', response.text)
    else:
        print('‚ùå No available models for content generation')
        
except Exception as e:
    print('\n‚ùå ERROR:', str(e))
    print('üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å API –∫–ª—é—á–∞ –≤ .env —Ñ–∞–π–ª–µ')
