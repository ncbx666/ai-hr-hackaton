#!/usr/bin/env python3
"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç AI-HR —Å–∏—Å—Ç–µ–º—ã
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É –≤—Å–µ—Ö –∫–ª—é—á–µ–≤—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
"""
import os
import sys
import json
from pathlib import Path
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

def test_speech_service():
    """–¢–µ—Å—Ç —Ä–µ—á–µ–≤–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞"""
    print("\nüé§ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SpeechService...")
    try:
        sys.path.append('api')
        from speech_service import SpeechService, MLQuestionGenerator
        
        # –¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        service = SpeechService()
        print("‚úÖ SpeechService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –¢–µ—Å—Ç ML –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –≤–æ–ø—Ä–æ—Å–æ–≤
        ml_gen = MLQuestionGenerator()
        print("‚úÖ MLQuestionGenerator –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ SpeechService: {e}")
        return False

def test_ds3_scoring():
    """–¢–µ—Å—Ç –º–æ–¥—É–ª—è –æ—Ü–µ–Ω–∫–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ DS3"""
    print("\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ DS3 –º–æ–¥—É–ª—è...")
    try:
        sys.path.append('../ds3')
        from score_candidate import ScoringModelGemini
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        prompts = {
            'scoring': '–û—Ü–µ–Ω–∏ –Ω–∞–≤—ã–∫ {{skill_being_assessed}} –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–æ–ø—Ä–æ—Å–∞ "{{question_text}}" –∏ –æ—Ç–≤–µ—Ç–∞ "{{candidate_answer}}"',
            'experience': '–û—Ü–µ–Ω–∏ –æ–ø—ã—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞–∫–∞–Ω—Å–∏–∏ {{vacancy_info}} –∏ —Ä–µ–∑—é–º–µ {{resume_info}} –∏ –æ—Ç–≤–µ—Ç–∞ {{candidate_answer}}'
        }
        weights = {'hard_skills': 0.4, 'experience': 0.4, 'soft_skills': 0.2}
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏
        model = ScoringModelGemini(prompts, weights)
        print("‚úÖ DS3 ScoringModelGemini –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ DS3: {e}")
        return False

def test_google_api():
    """–¢–µ—Å—Ç Google Generative AI API"""
    print("\nü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Google Generative AI API...")
    try:
        import google.generativeai as genai
        
        api_key = os.getenv('GOOGLE_API_KEY')
        if not api_key or api_key == 'your-google-cloud-api-key-here':
            print("‚ùå Google API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return False
            
        genai.configure(api_key=api_key)
        
        # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        model = genai.GenerativeModel('gemini-1.5-pro-latest')
        response = model.generate_content('–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏.')
        
        print("‚úÖ Google Generative AI —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print(f"üìù –¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç: {response.text[:100]}...")
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ Google API: {e}")
        return False

def test_environment():
    """–¢–µ—Å—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    print("\nüîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
    
    required_vars = ['GOOGLE_API_KEY', 'DATABASE_URL']
    optional_vars = ['GEMINI_API_KEY', 'OPENAI_API_KEY']
    
    missing_required = []
    for var in required_vars:
        value = os.getenv(var)
        if not value or value.startswith('your-'):
            missing_required.append(var)
        else:
            print(f"‚úÖ {var}: –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
    
    for var in optional_vars:
        value = os.getenv(var)
        if value and not value.startswith('your-'):
            print(f"‚úÖ {var}: –Ω–∞—Å—Ç—Ä–æ–µ–Ω (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)")
        else:
            print(f"‚ö†Ô∏è  {var}: –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)")
    
    if missing_required:
        print(f"‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {missing_required}")
        return False
    
    return True

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ AI-HR —Å–∏—Å—Ç–µ–º—ã")
    print("=" * 50)
    
    tests = [
        ("–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è", test_environment),
        ("Google API", test_google_api),
        ("SpeechService", test_speech_service),
        ("DS3 Scoring", test_ds3_scoring),
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        try:
            if test_func():
                passed += 1
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ '{test_name}': {e}")
    
    print("\n" + "=" * 50)
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ! –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ.")
        return True
    else:
        print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é.")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
